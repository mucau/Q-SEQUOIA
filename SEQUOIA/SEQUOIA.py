# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SEQUOIA
                                 A QGIS plugin
 module SEQUOIA
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-04-06
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Matthieu CHEVEREAU
        email                : matthieuchevereau@yahoo.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from qgis.PyQt.QtGui import QIcon
from qgis.core import * # QgsProject, Qgis, QgsVectorLayer, QgsRasterLayer
from qgis.utils import iface
from qgis import *
from os import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .SEQUOIA_dialog import SEQUOIADialog
import os.path


class SEQUOIA:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SEQUOIA_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = SEQUOIADialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SEQUOIA')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'SEQUOIA')
        self.toolbar.setObjectName(u'SEQUOIA')
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SEQUOIA', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """
        Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = os.path.join(self.plugin_dir,"sequoia.png")
        self.add_action(
            icon_path,
            text=self.tr(u'SEQUOIA'),
            callback=self.run,
            parent=self.iface.mainWindow())
            
        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&SEQUOIA'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar
        
    def wd_path(self):
        Title = 'Répertoire de travail'
        StartPath = "C:/Users/Matthieu/OneDrive - Cabinet Gourmain Barthélemy/CARTO"
        wd = QFileDialog.getExistingDirectory(
            self.dlg, Title,StartPath)
        self.dlg.lineEdit.setText(wd)

    def run(self):
        """Run method that performs all the real work"""
        self.dlg.comboBox1.clear()
        
        # Choix des cartes à ouvrir
        list1 = [self.tr('SITUATION'),self.tr('ASSEMBLAGE'),self.tr('PEUPLEMENTS'),self.tr('GEOLOGIE'),self.tr('ENJEUX')]
        self.dlg.comboBox1.addItems(list1)
        
        # Choix du répertoire de travail
        self.dlg.pushButton.clicked.connect(self.wd_path)
        
        # Affichage de la boite de dialogue
        self.dlg.show()
        
        # Run the dialog event loop
        result = self.dlg.exec_()
        
        # result
        if result==1:
            # Choix retenu
            choix = list1[self.dlg.comboBox1.currentIndex()]
            # Nom de la foret
            foret = self.dlg.lineEdit_2.text()
            # Création du répertoire de lecture
            repout2 = self.dlg.lineEdit.text() + '/' + 'SIG' + '/' + '2 PSG'
            # Création du répertoire de style
            style_directory = "C:/Users/Matthieu/Cabinet Gourmain Barthélemy/Site d'équipe - Documents/Cartographie/1_CGB/1_MODELES/STYLE"
            
            if self.dlg.checkBox.isChecked() or self.dlg.checkBox_2.isChecked() :
                if self.dlg.checkBox.isChecked():
                    list_SHP = ['_ROUTE_polygon.shp','_ROUTE_line.shp','_ROUTE_polygon.shp']
                    list_NOM = ['ROUTE_polygon','ROUTE_line','INFRASTRUCTURE']
                    list_STYLE = ['ROUTE_polygon.qml','ROUTE_line.qml', 'INFRASTRUCTURE_polygon.qml']
                    for i in range(len(list_SHP)) : # boucle sur list_SHP
                        layer_path = repout2 + '/' + foret + list_SHP[i]
                        layer_name = foret + list_SHP[i]
                        style_path = style_directory + '/' + list_STYLE[i] # définition du chemin vers le fichier style correspondant à la couche
                        layer = QgsVectorLayer(layer_path, layer_name, 'ogr')
                        if layer.isValid(): # Test de l'existence de la couche
                            layer = iface.addVectorLayer(layer_path, layer_name, 'ogr')
                            layer = iface.activeLayer() # attribut à la variable layer la couche qui est active, ici la derniere couche ajoutée
                            layer.loadNamedStyle(style_path) # applique le style à la couche ajoutée
                            layer.setName(list_NOM[i])                    
                    self.iface.messageBar().pushMessage("SEQUOIA", "Shapefiles ajoutés avec succès", level=Qgis.Success, duration=3)
                    
                if self.dlg.checkBox_2.isChecked():
                    list_SHP = ['_UA_polygon.shp','_UA_polygon.shp','_SSPF_polygon.shp','_PF_polygon.shp','_PF_line.shp']
                    list_NOM = ['Typologie des peuplements','Unité d''analyse','Sous-parcelle forestière','Parcelle forestière','Limite de parcelles']
                    list_STYLE = ['UA2_polygon.qml','UA_polygon.qml','SSPF_polygon.qml','PF_polygon.qml','PF_line.qml']
                    
                    for i in range(len(list_SHP)) : # boucle sur list_SHP
                        layer_path = repout2 + '/' + foret + list_SHP[i]
                        layer_name = foret + list_SHP[i]
                        style_path = style_directory + '/' + list_STYLE[i] # définition du chemin vers le fichier style correspondant à la couche
                        layer = QgsVectorLayer(layer_path, layer_name, 'ogr')
                        if layer.isValid(): # Test de l'existence de la couche
                            layer = iface.addVectorLayer(layer_path, layer_name, 'ogr')
                            layer = iface.activeLayer() # attribut à la variable layer la couche qui est active, ici la derniere couche ajoutée
                            layer.loadNamedStyle(style_path) # applique le style à la couche ajoutée
                            layer.setName(list_NOM[i])
            else :
                if choix == 'SITUATION':
                    QgsProject.instance().removeAllMapLayers()
                    
                    list_SHP = ['_PROP_polygon.shp','_PROP_point.shp','_COMS_point.shp','_COMS_line.shp','_PROP_polygon.shp']
                    list_NOM = ['Propriété','Centroid de propriété','Nom de la commune','Limite de commune','Légende']
                    list_STYLE = ['PROP_polygon.qml','PROP_point.qml','COMS_point.qml','COMS_line.qml','Situation_polygon.qml']
                    
                    urlWithParams = 'contextualWMSLegend=0&crs=EPSG:2154&dpiMode=7&featureCount=10&format=image/png&layers=IGN_SCAN1000_TIF_L93&styles&url=https://www.geograndest.fr/geoserver/ref/ows'
                    rlayer = QgsRasterLayer(urlWithParams, 'SCAN 1000 TOPO (Métropole)', 'wms')
                    QgsProject.instance().addMapLayer(rlayer)
                    
                    urlWithParams = 'contextualWMSLegend=0&crs=EPSG:2154&dpiMode=7&featureCount=10&format=image/png&layers=FXX_SCAN25TOPO&styles&url=http://mapsref.brgm.fr/wxs/refcom-brgm/refign'
                    rlayer = QgsRasterLayer(urlWithParams, 'SCAN 25 TOPO (Métropole)', 'wms')
                    QgsProject.instance().addMapLayer(rlayer)
                    
                    for i in range(len(list_SHP)) : # boucle sur list_SHP
                        layer_path = repout2 + '/' + foret + list_SHP[i]
                        layer_name = foret + list_SHP[i]
                        style_path = style_directory + '/' + list_STYLE[i] # définition du chemin vers le fichier style correspondant à la couche
                        layer = QgsVectorLayer(layer_path, layer_name, 'ogr')
                        if layer.isValid(): # Test de l'existence de la couche
                            layer = iface.addVectorLayer(layer_path, layer_name, 'ogr')
                            layer = iface.activeLayer() # attribut à la variable layer la couche qui est active, ici la derniere couche ajoutée
                            layer.loadNamedStyle(style_path) # applique le style à la couche ajoutée
                            layer.setName(list_NOM[i])
                    
                    layer = QgsProject.instance().mapLayersByName('Propriété')[0]
                    canvas = iface.mapCanvas()
                    extent = layer.extent()
                    canvas.setExtent(extent)
                    
                    self.iface.messageBar().pushMessage("SEQUOIA", "La carte " + choix + " a été générée avec succès", level=Qgis.Success, duration=5)
                    
                if choix == 'ASSEMBLAGE':
                    QgsProject.instance().removeAllMapLayers()
                    
                    list_SHP = ['_PARCA_polygon.shp','_PROP_line.shp','_ROAD_polygon.shp','_ROAD_line.shp','_LIEUDIT_point.shp','_INFRA_point.shp','_INFRA_polygon.shp','_INFRA_line.shp','_COM_point.shp','_COM_line.shp']
                    list_NOM = ['Parcelle cadastrale','Limite de propriété','ROAD_polygon','ROAD_line','LIEUDIT_point','INFRA_point','INFRA_polygon','INFRA_line','COMS_point','Limite de commune']
                    list_STYLE = ['PARCA_polygon.qml','PROP_line.qml','ROAD_polygon.qml','ROAD_line.qml','LIEUDIT_point.qml','INFRA_point.qml','INFRA_polygon.qml','INFRA_line.qml','COMS_point.qml','COMS_line.qml']
                    
                    urlWithParams = 'contextualWMSLegend=0&crs=EPSG:2154&dpiMode=7&featureCount=10&format=image/png&layers=FXX_SCAN25TOPO&styles&url=http://mapsref.brgm.fr/wxs/refcom-brgm/refign'
                    rlayer = QgsRasterLayer(urlWithParams, 'SCAN 25 TOPO (Métropole)', 'wms')
                    QgsProject.instance().addMapLayer(rlayer)
                    
                    urlWithParams = 'contextualWMSLegend=0&crs=EPSG:2154&dpiMode=7&featureCount=10&format=image/jpeg&layers=HR.ORTHOIMAGERY.ORTHOPHOTOS&styles&url=http://wxs.ign.fr/yyfs8nlf4dxpdhhlb4usil37/geoportail/r/wms?'
                    rlayer = QgsRasterLayer(urlWithParams, 'Ortho 20 cm', 'wms')
                    QgsProject.instance().addMapLayer(rlayer)
                    
                    for i in range(len(list_SHP)) : # boucle sur list_SHP
                        layer_path = repout2 + '/' + foret + list_SHP[i]
                        layer_name = foret + list_SHP[i]
                        style_path = style_directory + '/' + list_STYLE[i] # définition du chemin vers le fichier style correspondant à la couche
                        layer = QgsVectorLayer(layer_path, layer_name, 'ogr')
                        if layer.isValid(): # Test de l'existence de la couche
                            layer = iface.addVectorLayer(layer_path, layer_name, 'ogr')
                            layer = iface.activeLayer() # attribut à la variable layer la couche qui est active, ici la derniere couche ajoutée
                            layer.loadNamedStyle(style_path) # applique le style à la couche ajoutée
                            layer.setName(list_NOM[i])
                        
                    layer = QgsProject.instance().mapLayersByName('Parcelle cadastrale')[0]
                    canvas = iface.mapCanvas()
                    extent = layer.extent()
                    canvas.setExtent(extent)
                    
                    self.iface.messageBar().pushMessage("SEQUOIA", "La carte " + choix + " a été générée avec succès", level=Qgis.Success, duration=5)
                    
                if choix == 'PEUPLEMENTS':
                    QgsProject.instance().removeAllMapLayers()
                    
                    list_SHP = ['_UA_polygon.shp','_PROP_line.shp','_ROAD_polygon.shp','_ROAD_line.shp','_OBS_point.shp','_LIEUDIT_point.shp','_INFRA_polygon.shp','_INFRA_line.shp','_COMS_point.shp','_COM_line.shp']
                    list_NOM = ['Unité d''analyse','Limite de propriété','ROAD_polygon','ROAD_line','OBS_point','LIEUDIT_point','INFRA_polygon','INFRA_line','COMS_point','Limite de commune']
                    list_STYLE = ['UA_polygon.qml','PROP_line.qml','ROAD_polygon.qml','ROAD_line.qml','OBS_point.qml','LIEUDIT_point.qml','INFRA_polygon.qml','INFRA_line.qml','COMS_point.qml','COMS_line.qml']
                    
                    urlWithParams = 'contextualWMSLegend=0&crs=EPSG:2154&dpiMode=7&featureCount=10&format=image/png&layers=FXX_SCAN25TOPO&styles&url=http://mapsref.brgm.fr/wxs/refcom-brgm/refign'
                    rlayer = QgsRasterLayer(urlWithParams, 'SCAN 25 TOPO (Métropole)', 'wms')
                    QgsProject.instance().addMapLayer(rlayer)
                    
                    urlWithParams = 'contextualWMSLegend=0&crs=EPSG:2154&dpiMode=7&featureCount=10&format=image/jpeg&layers=HR.ORTHOIMAGERY.ORTHOPHOTOS&styles&url=http://wxs.ign.fr/p6s5bm8tv42wuyb6shx7an1w/geoportail/r/wms?service%3D%26'
                    rlayer = QgsRasterLayer(urlWithParams, 'Ortho 20 cm', 'wms')
                    QgsProject.instance().addMapLayer(rlayer)
                    
                    for i in range(len(list_SHP)) : # boucle sur list_SHP
                        layer_path = repout2 + '/' + foret + list_SHP[i]
                        layer_name = foret + list_SHP[i]
                        style_path = style_directory + '/' + list_STYLE[i] # définition du chemin vers le fichier style correspondant à la couche
                        layer = QgsVectorLayer(layer_path, layer_name, 'ogr')
                        if layer.isValid(): # Test de l'existence de la couche
                            layer = iface.addVectorLayer(layer_path, layer_name, 'ogr')
                            layer = iface.activeLayer() # attribut à la variable layer la couche qui est active, ici la derniere couche ajoutée
                            layer.loadNamedStyle(style_path) # applique le style à la couche ajoutée
                            layer.setName(list_NOM[i])
                        
                    layer = QgsProject.instance().mapLayersByName('Limite de propriété')[0]
                    canvas = iface.mapCanvas()
                    extent = layer.extent()
                    canvas.setExtent(extent)
                    
                    self.iface.messageBar().pushMessage("SEQUOIA", "La carte " + choix + " a été générée avec succès", level=Qgis.Success, duration=5)
                    
                if choix == 'GEOLOGIE':
                    QgsProject.instance().removeAllMapLayers()
                    
                    list_SHP = ['_UA_polygon.shp','_PF_polygon.shp','_PF_line.shp','_PROP_line.shp']
                    list_NOM = ['Unité d analyse','PF_polygon', 'Limite de parcelle', 'Limite de propriété']
                    list_STYLE = ['UA_polygon.qml','PF_polygon.qml','PF_line.qml','PROP_line.qml']
                    
                    urlWithParams = 'contextualWMSLegend=0&crs=EPSG:2154&dpiMode=7&featureCount=10&format=image/png&layers=SCAN_D_GEOL50&styles&url=http://geoservices.brgm.fr/geologie'
                    rlayer = QgsRasterLayer(urlWithParams, 'BRGM BD Scan-Géol-50', 'wms')
                    QgsProject.instance().addMapLayer(rlayer)
                    
                    for i in range(len(list_SHP)) : # boucle sur list_SHP
                        layer_path = repout2 + '/' + foret + list_SHP[i]
                        layer_name = foret + list_SHP[i]
                        style_path = style_directory + '/' + list_STYLE[i] # définition du chemin vers le fichier style correspondant à la couche
                        layer = QgsVectorLayer(layer_path, layer_name, 'ogr')
                        if layer.isValid(): # Test de l'existence de la couche
                            layer = iface.addVectorLayer(layer_path, layer_name, 'ogr')
                            layer = iface.activeLayer() # attribut à la variable layer la couche qui est active, ici la derniere couche ajoutée
                            layer.loadNamedStyle(style_path) # applique le style à la couche ajoutée
                            layer.setName(list_NOM[i])
                        
                    layer = QgsProject.instance().mapLayersByName('Unité d analyse')[0]
                    canvas = iface.mapCanvas()
                    extent = layer.extent()
                    canvas.setExtent(extent)
                    
                    self.iface.messageBar().pushMessage("SEQUOIA", "La carte " + choix + " a été générée avec succès", level=Qgis.Success, duration=5)
                    
                if choix == 'ENJEUX':
                    QgsProject.instance().removeAllMapLayers()
                    
                    urlWithParams = 'contextualWMSLegend=0&crs=EPSG:2154&dpiMode=7&featureCount=10&format=image/png&layers=FXX_SCAN25TOPO&styles&url=http://mapsref.brgm.fr/wxs/refcom-brgm/refign'
                    rlayer = QgsRasterLayer(urlWithParams, 'SCAN 25 TOPO (Métropole)', 'wms')
                    rlayer.renderer().setOpacity(0.75) # Transparence = 75%
                    QgsProject.instance().addMapLayer(rlayer)
                    
                    layer_path = repout2 + '/' + foret + '_PROP_line.shp'
                    layer_name = foret + '_PROP_line.shp'
                    style_path = style_directory + '/' + 'PROP_line.qml' # définition du chemin vers le fichier style correspondant à la couche
                    layer = iface.addVectorLayer(layer_path, layer_name, 'ogr')
                    layer = iface.activeLayer() # attribut à la variable layer la couche qui est active, ici la derniere couche ajoutée
                    layer.loadNamedStyle(style_path) # applique le style à la couche ajoutée
                    layer.setName('Limite de propriété')
                    canvas = iface.mapCanvas()
                    extent = layer.extent()
                    canvas.setExtent(extent)
                    
                    self.iface.messageBar().pushMessage("SEQUOIA", "La carte " + choix + " a été générée avec succès", level=Qgis.Success, duration=5)
        pass

